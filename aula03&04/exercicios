
// EXERCICIO 1
// 1
soma = 0;
//   1    n+1  n
for(x=0; x<n; x++)
{        // n
if (vetor[x] % 2 == 0)
// n ou 0
soma = soma + vetor[x];
}
// 1 
media = soma / n;
// RESPOSTA:
// pior 4n + 4
// melhor 3n + 4


// EXERCICIO 2
//    1         n       n
for (x = 0; x < n - 1; x++)
//n        1     n      n-1
    for (y = 1; y < n; y++)
//               n-1
        if (vetor[x] > vetor[y])
        { //      n-1 ou 0
            aux = vetor[x];
        //         n-1 ou 0
            vetor[x] = vetor[y];
        //         n-1 ou 0
            vetor[y] = aux;
        }
// RESPOSTA:
// pior 1 + n + n + n(1 + n + n - 1 + n - 1 + n - 1 + n - 1 + n - 1)
// 1 + 2n + n(6n - 4)
// 1 - 2n + 6n^2

// melhor 1 + n + n + n(1 + n + n - 1 + n - 1)
// 1 + 2n + n(3n - 1)
// 1 + n + 3n^2

// EXERCICIO BIG 0
// E1:
// a) n^2 + 5n          ->  O(n^2) quadrática
// b) 3n^2 + 5n         ->  O(n^2) quadrática
// c) (n + 7)(n – 2)    ->  O(n^2) quadrática
// d) 100n + 5          ->  O(n)   linear
// e) 6Log2N + 9^N      ->  O(9^N) exponencial
// f) 3n^4 + NLog2N     ->  O(n^4) polinomial?
// g) 5n^2 + n^3/2      ->  O(n^2) quadrática

// EXERCICIO 2:
//       1     n + 1    n 
for(int i = 1; i <= n; i++){
//              n
        soma = soma + i;
    }
// RESPOSTA: 3n+2, O(n) linear 

// EXERCICIO 3:
// 1
i = 1;
// n + 1
while (i <= N) {
    // n - 1
    j = 1;
//n (       n + 1
    while (j <= N) {
        // n-1
        k = 1;
// n(            n+1           
        while (k <= N) {
            // n - 1
            printf(“i = %d, j = %d, k = %d”, i, j, k);
            // n - 1
            k = k + 1;
        }
        // n - 1
        j = j + 1;
    }
// n - 1
i = i + 1;
}

// RESPOSTA: A = 1 + n + 1 + n - 1 + n - 1 + n(B(C))
// B = n+1+n-1+n-1+n(C)
// C = n+1+n-1+n-1 = 3n-1
// B(C) = 3n^2 + 2n - 1
// A(B(C)) = 3n+n(3n^2+2n-1) = 3n^3+2n^2+2n
// O(n^3) cúbica